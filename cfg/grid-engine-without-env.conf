smartmet :
{
engine :
{
grid :
{


# Processing of grid/grib files requires a lot of configuration information. 
# This information should be found from the file below. 

grid-files :
{
  configFile = "$(GRID_FILES_CONFIG_DIR)/grid-files.conf"
}


# The content server defines the source of the content information. In practice,
# the master source of the content information is the Redis database. However,
# it is not fast enough for our purposes. That's why its information is cached
# to a memory based content server. This cache server can be a remote content
# server that is used over CORBA connection, or it can be embedded ("local") into 
# the grid engine. The cache content server is very fast but it uses a lot of
# memory. That's why it usually makes sense to use the remote cache server if 
# that is possible. On the other hand this means that the grid engine can
# start much faster because it does not need to cache content information first.

content-server :
{
  ######  The remote content server. Notice that the remote content server has its own configuration file.
  
  remote  = true
  ior     = "IOR:010000003600000049444c3a536d6172744d65742f436f6e74656e745365727665722f436f7262612f53657276696365496e746572666163653a312e30000000010000000000000068000000010102000a0000003132372e302e302e3100082016000000ff6d7920706f6100436f6e74656e745365727669636500000200000000000000080000000100000000545441010000001c00000001000000010001000100000001000105090101000100000009010100"


  ######  The local content server. These settings are valid when the "remote" attribute is "false".

  # The master source of the content information is the Redis database.
 
  redis :
  {
    address      = "127.0.0.1"
    port         = 6380
    tablePrefix  = "b."
  }
  
  processing-log :
  {
    enabled      = true
    file         = "$(GRID_ENGINE_LOG_DIR)/contentServer_processing.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
  
  debug-log :
  {
    enabled      = true
    file         = "$(GRID_ENGINE_LOG_DIR)/contentServer_debug.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
  
  cache :
  {
    # Content sorting flags:
    # -------------------
    #  bit 0 (1)  : reserved 
    #  bit 1 (2)  : Sort by fmi-id (radonParameterId)
    #  bit 2 (4)  :  Sort by fmi-name (radonParameterName)
    #  bit 3 (8)  : Sort by grib-id
    #  bit 4 (16) : Sort by newbase-id
    #  bit 5 (32) : Sort by newbase-name
    #  bit 6 (64) : Sort by cdm-id
    #  bit 7 (128): Sort by cdm-name

	# (1 + 2 + 4 + 32)
    contentSortingFlags = 39   
  }
}



# The data server is responsible for fetching actual data from the grid files. It is possible
# to use a local or a remote data server. The data server uses also a lot of memory and maps
# grid files into virtual memory. That's why it would be smarter to use shared data servers
# when possible. On the other hand, the remote data server is usually always up and running
# which means that it can be used immediately. If the data server is local then it
# takes some time to start the system and make sure that all grid files are available.
# If the remote data server is disabled then the local data server is used in the engine.

data-server :
{
  ######  The remote data server. Notice that the remote data server has its own configuration file.
  
  remote  = true
  caching = true
  ior     = "IOR:010000003300000049444c3a536d6172744d65742f446174615365727665722f436f7262612f53657276696365496e746572666163653a312e300000010000000000000064000000010102000a0000003132372e302e302e3100092013000000ff6d7920706f61004461746153657276696365000200000000000000080000000100000000545441010000001c00000001000000010001000100000001000105090101000100000009010100"


  ######  The local data server. These settings are valid when the "remote" attribute is "false".

  gridDirectory = "$(GRID_DATA_DIR)"
  
  contentPreload : 
  {  
    enabled = false;
  }
     
  virtualFiles :
  {
    enabled = false
  	definitionFile = "$(GRID_ENGINE_CONFIG_DIR)/vff_convert.csv"
  }
  
  luaFiles = 
  [
  	"$(GRID_ENGINE_CONFIG_DIR)/vff_convert.lua"
  ];

  file-cache :
  {
  	numOfGrids                     = 50000
    maxUncompressedSizeInMegaBytes = 10000
    maxCompressedSizeInMegaBytes   = 10000
  }

  processing-log :
  {
    enabled      = true
    file         = "$(GRID_ENGINE_LOG_DIR)/dataServer_processing.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
  
  debug-log :
  {
    enabled      = true
    file         = "$(GRID_ENGINE_LOG_DIR)/dataServer_debug.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
}


# The query server is responsible for making data queries to the data server according
# to the content information that it gets from the content server. Also the query server
# can be local or remote. Sometimes it is smarter to locate the query server closer to 
# the content server and the data server, because there might be a lot traffic between them.
# If the remote query server is disabled then the local query server is used in the engine.

query-server :
{
  remote  = false
  ior     = "IOR:010000003400000049444c3a536d6172744d65742f51756572795365727665722f436f7262612f53657276696365496e746572666163653a312e3000010000000000000064000000010102000a0000003132372e302e302e31000a2014000000ff6d7920706f61005175657279536572766963650200000000000000080000000100000000545441010000001c00000001000000010001000100000001000105090101000100000009010100"

  #  producerFile = "$(GRID_ENGINE_CONFIG_DIR)/producers_test.csv"
  producerFile = "$(GRID_ENGINE_CONFIG_DIR)/producers.csv"
  producerAliasFile = "$(GRID_ENGINE_CONFIG_DIR)/producerAlias.cfg"
   
  # If the gridEngine notices that there are not valid mappings available for all
  # parameters found from the contentServer, then it automatically adds these unmapped
  # parameters to the following files. The queryServer needs these mappings in order to
  # find the current parameters. You can move these automatically generated mappings into
  # a more permanent mapping file (mappings_fmi_auto.csv => mappings_fmi.csv). On the other
  # hand, when the permanent mapping files are empty then you can get your basic mapping
  # settings from these automatically generated files (i.e. when you are first time 
  # configuring your system).
    
  mappingUpdateFile :
  {
    fmi = "$(GRID_ENGINE_CONFIG_DIR)/mapping_fmi_auto.csv"
    newbase = "$(GRID_ENGINE_CONFIG_DIR)/mapping_newbase_auto.csv"
  }
  
  luaFiles = 
  [
  	"$(GRID_ENGINE_CONFIG_DIR)/function_basic.lua",
  	"$(GRID_ENGINE_CONFIG_DIR)/function_interpolation.lua",
  	"$(GRID_ENGINE_CONFIG_DIR)/function_conversion.lua",
  	"$(GRID_ENGINE_CONFIG_DIR)/function_newbase.lua",
  	"$(GRID_ENGINE_CONFIG_DIR)/function_demo.lua"
  ];
  
  mappingFiles =
  [
    "$(GRID_ENGINE_CONFIG_DIR)/mapping_fmi.csv",
    "$(GRID_ENGINE_CONFIG_DIR)/mapping_fmi_auto.csv",
    "$(GRID_ENGINE_CONFIG_DIR)/mapping_newbase.csv",
    "$(GRID_ENGINE_CONFIG_DIR)/mapping_newbase_auto.csv",
    "$(GRID_ENGINE_CONFIG_DIR)/mapping_virtual.csv",
    "$(GRID_ENGINE_CONFIG_DIR)/mapping_fmi_test.csv",
    "$(GRID_ENGINE_CONFIG_DIR)/mapping_newbase_test.csv"
  ];

  aliasFiles =
  [
    "$(GRID_ENGINE_CONFIG_DIR)/alias_demo.cfg",
    "$(GRID_ENGINE_CONFIG_DIR)/alias_newbase_extension.cfg"
  ];

  processing-log :
  {
    enabled      = true
    file         = "$(GRID_ENGINE_LOG_DIR)/queryServer_processing.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
  
  debug-log :
  {
    enabled      = true
    file         = "$(GRID_ENGINE_LOG_DIR)/queryServer_debug.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
}

}
}
}
